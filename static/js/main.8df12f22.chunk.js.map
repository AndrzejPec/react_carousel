{"version":3,"sources":["components/Carousel.tsx","App.tsx","index.tsx"],"names":["Carousel","images","imageWidth","frameSize","step","animationDuration","infinite","containerWidth","totalWidth","length","maxOffset","useState","currentOffset","setCurrentOffset","className","title","type","onClick","newOffset","moveRight","disabled","style","width","marginLeft","transition","map","image","index","src","alt","moveLeft","App","state","setState","handleInputChange","field","value","prevState","margin","display","htmlFor","name","onChange","e","Number","target","checked","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.8df12f22.chunk.js","sourcesContent":["/* eslint-disable jsx-a11y/img-redundant-alt */\nimport React, { useState } from 'react';\nimport './Carousel.scss';\n\ninterface CarouselProps {\n  images: string[];\n  imageWidth: number;\n  frameSize: number;\n  step: number;\n  animationDuration: number;\n  infinite: boolean;\n}\n\nconst GAP = 25;\n\nexport const Carousel: React.FC<CarouselProps> = ({\n  images,\n  imageWidth,\n  frameSize,\n  step,\n  animationDuration,\n  infinite,\n}) => {\n  const containerWidth = (imageWidth + GAP) * frameSize;\n  const totalWidth = (imageWidth + GAP) * images.length;\n  const maxOffset = -(totalWidth - containerWidth);\n\n  const [currentOffset, setCurrentOffset] = useState(0);\n\n  const moveLeft = () => {\n    let newOffset = currentOffset - (imageWidth + GAP) * step;\n\n    if (newOffset < maxOffset) {\n      if (infinite) {\n        newOffset = 0;\n      } else {\n        newOffset = maxOffset;\n      }\n    }\n\n    setCurrentOffset(newOffset);\n  };\n\n  const moveRight = () => {\n    let newOffset = currentOffset + (imageWidth + GAP) * step;\n\n    if (newOffset > 0) {\n      if (infinite) {\n        newOffset = maxOffset;\n      } else {\n        newOffset = 0;\n      }\n    }\n\n    setCurrentOffset(newOffset);\n  };\n\n  return (\n    <div className=\"CarouselWrapper\">\n      <button\n        title=\"prevButton\"\n        type=\"button\"\n        onClick={() => {\n          if (currentOffset < 0) {\n            moveRight();\n          }\n        }}\n        disabled={currentOffset >= 0}\n      >\n        {' ← '}\n      </button>\n      {/* eslint-disable-next-line react/jsx-indent */}\n      <div className=\"Carousel\" style={{ width: `${containerWidth}px` }}>\n\n        <ul\n          className=\"Carousel__list\"\n          style={{\n            width: `${totalWidth}px`,\n            marginLeft: `${currentOffset}px`,\n            transition: `margin-left ${animationDuration / 1000}s ease-in-out`,\n          }}\n        >\n          {images.map((image, index) => (\n            <li key={image}>\n              <img\n                src={image}\n                alt={`Image ${index + 1}`}\n                style={{ width: `${imageWidth}px` }}\n                width={imageWidth}\n              />\n            </li>\n          ))}\n        </ul>\n\n      </div>\n      <button\n        data-cy=\"next\"\n        title=\"nextButton\"\n        type=\"button\"\n        onClick={() => {\n          if (currentOffset > maxOffset) {\n            moveLeft();\n          }\n        }}\n        disabled={currentOffset <= maxOffset}\n      >\n        {' → '}\n      </button>\n    </div>\n  );\n};\n","import React, { useState } from 'react';\nimport { Carousel } from './components/Carousel';\n\nexport const App: React.FC = () => {\n  const [state, setState] = useState({\n    images: [\n      './img/1.png',\n      './img/2.png',\n      './img/3.png',\n      './img/4.png',\n      './img/5.png',\n      './img/6.png',\n      './img/7.png',\n      './img/8.png',\n      './img/9.png',\n      './img/10.png',\n    ],\n    imageWidth: 130,\n    frameSize: 3,\n    step: 3,\n    animationDuration: 1000,\n    infinite: true,\n  });\n\n  const toggleInfinite = () => {\n    setState(prevState => ({ ...prevState, infinite: !prevState.infinite }));\n  };\n\n  const {\n    images,\n    imageWidth,\n    frameSize,\n    step,\n    animationDuration,\n    infinite,\n  } = state;\n\n  const handleInputChange = (field: string, value: number) => {\n    setState(prevState => ({\n      ...prevState,\n      [field]: value,\n    }));\n  };\n\n  return (\n    <div className=\"App\">\n      <h1 data-cy=\"title\">\n        Carousel with\n        {images.length}\n        images\n      </h1>\n      <form style={{ margin: '20px', display: 'inline-block' }}>\n        <div>\n          <label htmlFor=\"itemId\">\n            Item Width:&nbsp;\n            <input\n              type=\"number\"\n              name=\"itemId\"\n              value={imageWidth}\n              onChange={(e) => handleInputChange('imageWidth',\n                Number(e.target.value))}\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"frameId\">\n            Frame Size:&nbsp;\n            <input\n              type=\"number\"\n              name=\"frameId\"\n              value={frameSize}\n              onChange={(e) => handleInputChange('frameSize',\n                Number(e.target.value))}\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"stepId\">\n            Step:&nbsp;\n            <input\n              type=\"number\"\n              name=\"stepId\"\n              value={step}\n              onChange={(e) => handleInputChange('step',\n                Number(e.target.value))}\n            />\n          </label>\n        </div>\n        <div>\n          <label htmlFor=\"animationDuration\">\n            Animation Duration:&nbsp;\n            <input\n              type=\"number\"\n              name=\"animationDuration\"\n              value={animationDuration}\n              onChange={(e) => handleInputChange('animationDuration',\n                Number(e.target.value))}\n            />\n          </label>\n        </div>\n        <div>\n          <label>\n            Infinite Scroll:\n            <input\n              type=\"checkbox\"\n              checked={infinite}\n              onChange={() => toggleInfinite()}\n            />\n          </label>\n        </div>\n      </form>\n      <Carousel\n        step={step}\n        images={images}\n        frameSize={frameSize}\n        imageWidth={imageWidth}\n        animationDuration={animationDuration}\n        infinite={infinite}\n      />\n    </div>\n  );\n};\n","import ReactDOM from 'react-dom';\nimport { App } from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}